cmake_minimum_required(VERSION 3.0.2)

project(phi)

add_definitions(-DNOMINMAX)
if (APPLE)
    add_definitions(-DAPPLE)
    set(os osx)
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++0x")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
elseif (WIN32)
    add_definitions(-DWIN32)

    if ("${SOLUTION_PLATFORM}" STREQUAL x64)
        set (os win64)
    else()
        set (os win32)
    endif()
    
endif (APPLE)

add_subdirectory(src/diagnostics)
add_subdirectory(src/core)
add_subdirectory(src/io)
add_subdirectory(src/loader)
add_subdirectory(src/rendering)
#add_subdirectory(src/ui)
add_subdirectory(src/demo)
add_subdirectory(src/scenes)

if ( WIN32 )
    set_target_properties(diagnostics PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(diagnostics PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(diagnostics PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(core PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(core PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(core PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(rendering PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../ )
    set_target_properties(rendering PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(rendering PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    #set_target_properties(ui PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    #set_target_properties(ui PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    #set_target_properties(ui PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(demo PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(demo PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(demo PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(io PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(io PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(io PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(scenes PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(scenes PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(scenes PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(loader PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(loader PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(loader PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
endif ( WIN32 )

set (dlls_dir ${CMAKE_CURRENT_SOURCE_DIR}/libs/${SOLUTION_PLATFORM})

if (WIN32)
    file(GLOB dll_files ${dlls_dir}/*.dll)
    file(GLOB tlb_files ${dlls_dir}/*.tlb)
elseif(APPLE)
    file(GLOB dll_files ${dlls_dir}/*.*)
endif()

set (library_dir ${CMAKE_CURRENT_SOURCE_DIR}/library)
set (resources_dir ${CMAKE_CURRENT_SOURCE_DIR}/resources)
set (image_dir ${CMAKE_CURRENT_SOURCE_DIR}/images)

file(GLOB image_files ${image_dir}/*.*)

 file(GLOB HOOK_SCRIPTS ./git_hooks/*) 
 if (HOOK_SCRIPTS) 
    file(COPY ${HOOK_SCRIPTS} DESTINATION ${CMAKE_SOURCE_DIR}/.git/hooks) 
endif (HOOK_SCRIPTS)

foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
        string( TOLOWER ${OUTPUTCONFIG} OUTPUTCONFIG )
        set (dir ${CMAKE_CURRENT_SOURCE_DIR}/build${SOLUTION_PLATFORM}/${OUTPUTCONFIG})
        #install(DIRECTORY ${resources_dir} DESTINATION ${dir})
        #install(DIRECTORY ${library_dir} DESTINATION ${dir})
        install(FILES ${image_files} DESTINATION ${dir})
        install(FILES ${dll_files} DESTINATION ${dir})
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)