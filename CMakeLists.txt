cmake_minimum_required(VERSION 3.0.2)

project(phi)

set(CMAKE_SUPPRESS_REGENERATION TRUE)

add_definitions(-DNOMINMAX)

if (APPLE)
    add_definitions(-DAPPLE)
    set(os osx)
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++0x")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
elseif (MSVC)
    add_definitions(-DWIN32)

    if ("${SOLUTION_PLATFORM}" STREQUAL x64)
        set (os win64)
    else()
        set (os win32)
    endif()
elseif(CMAKE_COMPILER_IS_GNUCXX)
    add_compile_options(-Wall -Weffc++ -pedantic -std=c++11)
endif (APPLE)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS TRUE)
SET_PROPERTY(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER !CMake)

add_subdirectory(src/phi)
add_subdirectory(src/diagnostics)
add_subdirectory(src/core)
add_subdirectory(src/io)
add_subdirectory(src/loader)
add_subdirectory(src/rendering)
add_subdirectory(src/ui)
add_subdirectory(src/demo)
add_subdirectory(src/scenes)

if (MSVC)
    set_target_properties(diagnostics PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(diagnostics PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(diagnostics PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(core PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(core PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(core PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(rendering PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../ )
    set_target_properties(rendering PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(rendering PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(ui PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(ui PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(ui PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(demo PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(demo PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(demo PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(io PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(io PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(io PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(scenes PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(scenes PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(scenes PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    set_target_properties(loader PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../../)
    set_target_properties(loader PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ../../debug)
    set_target_properties(loader PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ../../release)
    
endif (MSVC)

set (dlls_dir ${CMAKE_CURRENT_SOURCE_DIR}/libs/${SOLUTION_PLATFORM})

if (MSVC)
    file(GLOB dll_files ${dlls_dir}/*.dll)
    file(GLOB tlb_files ${dlls_dir}/*.tlb)
elseif(APPLE)
    file(GLOB dll_files ${dlls_dir}/*.*)
endif(MSVC)

set (library_dir ${CMAKE_CURRENT_SOURCE_DIR}/library)
set (resources_dir ${CMAKE_CURRENT_SOURCE_DIR}/resources)
set (image_dir ${CMAKE_CURRENT_SOURCE_DIR}/images)
set (src_dir ${CMAKE_BINARY_DIR}/src)

file(GLOB image_files ${image_dir}/*.*)

 file(GLOB HOOK_SCRIPTS ./git_hooks/*) 
 if (HOOK_SCRIPTS) 
    file(COPY ${HOOK_SCRIPTS} DESTINATION ${CMAKE_SOURCE_DIR}/.git/hooks) 
endif (HOOK_SCRIPTS)

if (MSVC)

file(GLOB NUGET_PACKAGES ./nuget_packages/*)

file(COPY ${NUGET_PACKAGES} DESTINATION ${src_dir}/diagnostics)
file(COPY ${NUGET_PACKAGES} DESTINATION ${src_dir}/core)
file(COPY ${NUGET_PACKAGES} DESTINATION ${src_dir}/io)
file(COPY ${NUGET_PACKAGES} DESTINATION ${src_dir}/loader)
file(COPY ${NUGET_PACKAGES} DESTINATION ${src_dir}/rendering)
file(COPY ${NUGET_PACKAGES} DESTINATION ${src_dir}/scenes)
file(COPY ${NUGET_PACKAGES} DESTINATION ${src_dir}/ui)
file(COPY ${NUGET_PACKAGES} DESTINATION ${src_dir}/demo)

endif(MSVC)

foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
        string( TOLOWER ${OUTPUTCONFIG} OUTPUTCONFIG )
        set (dir ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG})
        #install(DIRECTORY ${resources_dir} DESTINATION ${dir})
        #install(DIRECTORY ${library_dir} DESTINATION ${dir})
        install(FILES ${image_files} DESTINATION ${dir})
        install(FILES ${dll_files} DESTINATION ${dir})

endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)